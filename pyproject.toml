[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[project]
name = "newa"
dynamic = ["version"]
description = "newa"
readme = "README.md"
license = "Apache-2.0"
license-files = { paths = ["LICENSE.txt"] }
requires-python = ">=3.9"
authors = [
    { name = "Karel Srot", email = "ksrot@redhat.com" },
    { name = "Patrik Kis", email = "pkis@redhat.com" },
    { name = "Miroslav Vadkerti", email = "mvadkert@redhat.com" },
    { name = "Milos Prchlik", email = "mprchlik@redhat.com" },
]

maintainers = [
    { name = "Karel Srot", email = "ksrot@redhat.com" },
    { name = "Patrik Kis", email = "pkis@redhat.com" },
    { name = "Miroslav Vadkerti", email = "mvadkert@redhat.com" },
    { name = "Milos Prchlik", email = "mprchlik@redhat.com" },
]

keywords = [
    "testing",
]
# classifiers = [
#    "License :: OSI Approved :: MIT License",
#    "Natural Language :: English",
#    "Programming Language :: Python :: 3.9",
#    "Programming Language :: Python :: 3.11",
#    "Topic :: Utilities",
#    "Topic :: Software Development :: Testing",
#    "Operating System :: POSIX :: Linux",
#    ]
dependencies = [
    "click>=8.0.3,!=8.1.4",
    "attrs>=20.3.0",
    "ruamel.yaml>=0.16.6"
]

[project.optional-dependencies]

[project.scripts]
newa = "newa.cli:main"

[project.urls]
# TODO: provide URL
# homepage = "..."

[tool.hatch.version]
source = "vcs"
raw-options.version_scheme = "release-branch-semver"

[tool.hatch.build.targets.sdist]
include = [
    "/README.md",
    ]

# TODO: man page?
# artifacts = ["newa.1"]

[tool.hatch.envs.default]
platforms = ["linux"]

[tool.hatch.envs.dev]
description = "Development environment"
dependencies = [
    "autopep8",
    "ruff",
    "mypy",
    "pytest",
    "pre-commit",
    ]

[tool.hatch.envs.dev.scripts]
lint = ["autopep8 {args:.}", "ruff --fix {args:.}"]
type = ["mypy {args:newa}"]
check = ["lint", "type"]

# TODO: disabled unit tests until later
#
# unit = "pytest -vvv -ra --showlocals tests/unit"
#
# [tool.hatch.envs.test]
# template = "dev"
# description = "Run scripts with multiple Python versions"
#
# [[tool.hatch.envs.test.matrix]]
# python = ["3.9", "3.11", "3.12"]
#
# [tool.hatch.envs.docs]
# dependencies = ["tmt[docs]"]

[dirs.env]
virtual = ".venv"

[tool.mypy]
# Be vewy, vewy stwict, we'we hunting wabbits^Wbugs.
strict = true

# Automagically make imported object part of mypy's view of module's namespace.
implicit_reexport = true

# Make error messages more rich, this helps better targeted waivers.
show_error_codes = true

# Allow mypy to follow imports to get correct picture of type
# annotations across module boundaries.
follow_imports = "normal"

python_version = "3.9"
files = ["newa/"]

[[tool.mypy.overrides]]
module = []
ignore_missing_imports = true

[tool.autopep8]
max_line_length = 99
in-place = true
recursive = true
hang-closing = true
aggressive = 2

[tool.pep8]
max-line-length = "99"

[tool.ruff]
line-length = 99
src = ["newa"]
target-version = "py39"
select = [
    "F",  # pyflakes
    "E",  # pycodestyle
    "W",  # pycodestyle
    "I",  # isort
    "N",  # pep8-naming
    "UP",  # pyupgrade
    "B",  # flake8-bugbear
    "C4",  # flake8-comprehensions
    "YTT",  # flake8-2020
    "PT",  # flake8-pytest-style
    "RET",  # flake8-return
    "SIM",  # flake8-simplify
    "COM",  # flake8-commas
    "DTZ",  # flake8-datetimez
    "T10",  # flake8-debugger
    "EXE",  # flake8-executable
    "PIE",  # flake8-pie
    "RSE",  # flake8-raise
    "PGH",  # pygrep-hooks
    "PLC",  # pylint-convention
    "PLE",  # pylint-error
    "PLR01",  # pylint-refactor
    "PLR02",
    "PLR04",
    "PLR1",
    "RUF",  # ruff
    ]
ignore = [
]

[tool.ruff.isort]
known-first-party = ["newa"]
